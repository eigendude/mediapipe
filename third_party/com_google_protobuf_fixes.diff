diff --git a/BUILD.bazel b/BUILD.bazel
index 0f6e41e3a..81e56ee55 100644
--- a/BUILD.bazel
+++ b/BUILD.bazel
@@ -69,6 +69,7 @@ cc_library(
     includes = ["src/"],
     linkopts = LINK_OPTS,
     visibility = ["//visibility:public"],
+    alwayslink = 1,
 )
 
 cc_library(
@@ -138,8 +139,9 @@ cc_library(
     visibility = ["//visibility:public"],
     deps = [":protobuf_lite"] + select({
         "//build_defs:config_msvc": [],
-        "//conditions:default": ["@zlib//:zlib"],
+        "//conditions:default": ["@zlib"],
     }),
+    alwayslink = 1,
 )
 
 # This provides just the header files for use in projects that need to build
diff --git a/src/google/protobuf/io/gzip_stream.h b/src/google/protobuf/io/gzip_stream.h
index 4cf71b6c3..2035a33d3 100644
--- a/src/google/protobuf/io/gzip_stream.h
+++ b/src/google/protobuf/io/gzip_stream.h
@@ -47,11 +47,14 @@
 #include <google/protobuf/stubs/common.h>
 #include <google/protobuf/io/zero_copy_stream.h>
 #include <google/protobuf/port.h>
-#include "zlib.h"
 
 // Must be included last.
 #include <google/protobuf/port_def.inc>
 
+#if HAVE_ZLIB
+#include <zlib.h>
+#endif  // HAVE_ZLIB
+
 namespace google {
 namespace protobuf {
 namespace io {
@@ -78,8 +81,10 @@ class PROTOBUF_EXPORT GzipInputStream PROTOBUF_FUTURE_FINAL
   virtual ~GzipInputStream();
 
   // Return last error message or NULL if no error.
+  #if HAVE_ZLIB
   inline const char* ZlibErrorMessage() const { return zcontext_.msg; }
   inline int ZlibErrorCode() const { return zerror_; }
+  #endif  // HAVE_ZLIB
 
   // implements ZeroCopyInputStream ----------------------------------
   bool Next(const void** data, int* size) override;
@@ -92,8 +97,10 @@ class PROTOBUF_EXPORT GzipInputStream PROTOBUF_FUTURE_FINAL
 
   ZeroCopyInputStream* sub_stream_;
 
+  #if HAVE_ZLIB
   z_stream zcontext_;
   int zerror_;
+  #endif  // HAVE_ZLIB
 
   void* output_buffer_;
   void* output_position_;
@@ -146,8 +153,10 @@ class PROTOBUF_EXPORT GzipOutputStream PROTOBUF_FUTURE_FINAL
   virtual ~GzipOutputStream();
 
   // Return last error message or NULL if no error.
+  #if HAVE_ZLIB
   inline const char* ZlibErrorMessage() const { return zcontext_.msg; }
   inline int ZlibErrorCode() const { return zerror_; }
+  #endif  // HAVE_ZLIB
 
   // Flushes data written so far to zipped data in the underlying stream.
   // It is the caller's responsibility to flush the underlying stream if
@@ -180,8 +189,10 @@ class PROTOBUF_EXPORT GzipOutputStream PROTOBUF_FUTURE_FINAL
   void* sub_data_;
   int sub_data_size_;
 
+  #if HAVE_ZLIB
   z_stream zcontext_;
   int zerror_;
+  #endif // HAVE_ZLIB
   void* input_buffer_;
   size_t input_buffer_length_;
 
-- 
2.43.0

